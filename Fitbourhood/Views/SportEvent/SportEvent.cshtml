@{
    ViewBag.Title = "SportEvent";
}
@using Fitbourhood.Helpers
@model Fitbourhood.Models.SportEventModel
@{
    var user = UserContextHelper.GetUserContextModel();
}
<div class="container">
    <div style=" width: 100%; height: 500px;">
        @if (Model.IsCreateMode)
        {
            using (Html.BeginForm("AddSportEvent", "SportEvent", FormMethod.Post, new {style = "width: auto;"}))
            {
                <div id="map" style="width: 400px; height: 400px; float: right;"></div>
                <div class="input-group mt-2 mb-2" style="width: 250px;">
                    @Html.DropDownListFor(m => m.DDiscipline, ViewBag.EnumDDisciplineList as SelectList, new {@class = "form-control"})
                </div>
                @Html.ValidationMessageFor(m => m.DDiscipline, "", new {@class = "error"})
                <div class="input-group date mt-2 mb-2" style="width: 250px;">
                    @Html.TextBoxFor(m => m.Date, new {@class = "form-control", placeholder = "Wybierz dzień..."})
                    <span class="input-group-addon icon-span"><i class="fas fa-calendar"></i></span>
                </div>
                @Html.ValidationMessageFor(m => m.Date, "", new {@class = "error"})
                <div class="input-group clockpicker mt-2 mb-2" style="width: 250px;">
                    @Html.TextBoxFor(m => m.Time, new {@class = "form-control", placeholder = "Wybierz godzinę..."})
                    <span class="input-group-addon icon-span"><i class="fas fa-clock"></i></span>
                </div>
                @Html.ValidationMessageFor(m => m.Time, "", new {@class = "error"})
                <div class="input-group mt-2 mb-2" style="width: 250px;">
                    @Html.TextBoxFor(m => m.MaxCapacity, new {@class = "form-control", placeholder = "Liczba uczestników...", @type = "number", @min = "1", @max = "50"})
                    <span class="input-group-addon icon-span"><i class="fas fa-user"></i></span>
                </div>
                @Html.ValidationMessageFor(m => m.MaxCapacity, "", new {@class = "error"})
                <div class="input-group mt-2 mb-2" style="width: 250px;">
                    @Html.TextAreaFor(m => m.Description, new {@class = "form-control", placeholder = "Opis..."})
                </div>
                @Html.HiddenFor(m => m.DDiscipline)
                @Html.HiddenFor(m => m.Date)
                @Html.HiddenFor(m => m.Time)
                @Html.HiddenFor(m => m.MaxCapacity)
                @Html.HiddenFor(m => m.Description)
                @Html.HiddenFor(m => m.Address)
                @Html.HiddenFor(m => m.CoordinateLatitude)
                @Html.HiddenFor(m => m.CoordinateLongitude)
                @Html.HiddenFor(m => m.CreatorID, new {@Value = user.ID})
                <input type="submit" class="btn btn-success mt-2 mb-2" style="float: left; width: 120px;" value="Utwórz"/>
                @Html.ActionLink("Anuluj", "Index", "SportEvent", new {@class = "btn btn-warning mt-2 mb-2", style = "float: left; width: 120px;"})
            }
        }
        else
        {
            <div id="map" style="width: 400px; height: 400px; float: right;"></div>
            if (Model.ContactList.Any())
            {
                <div id="contactListContainer" style="width: 200px;">
                    @foreach (var contact in Model.ContactList)
                    {
                        <span style="font-weight: bold; color: #42a5f5; font-size: 14px;">@contact.Name: </span> <span style="color: #9b9b9b; font-size: 14px;">@contact.PhoneNumber</span><br/>
                    }
                </div>
            }
            <div class="input-group mt-2 mb-2" style="width: 250px;">
                @Html.DropDownListFor(m => m.DDiscipline, ViewBag.EnumDDisciplineList as SelectList, new { @class = "form-control", @disabled = "disabled" })
            </div>
            @Html.ValidationMessageFor(m => m.DDiscipline, "", new { @class = "error" })
            <div class="input-group date mt-2 mb-2" style="width: 250px;">
                @Html.TextBoxFor(m => m.Date, new { @class = "form-control", placeholder = "Wybierz dzień...", @disabled = "disabled" })
                <span class="input-group-addon icon-span"><i class="fas fa-calendar"></i></span>
            </div>
            @Html.ValidationMessageFor(m => m.Date, "", new { @class = "error" })
            <div class="input-group clockpicker mt-2 mb-2" style="width: 250px;">
                @Html.TextBoxFor(m => m.Time, new { @class = "form-control", placeholder = "Wybierz godzinę...", @disabled = "disabled" })
                <span class="input-group-addon icon-span"><i class="fas fa-clock"></i></span>
            </div>
            @Html.ValidationMessageFor(m => m.Time, "", new { @class = "error" })
            <div class="input-group mt-2 mb-2" style="width: 250px;">
                @Html.TextBoxFor(m => m.MaxCapacity, new { @class = "form-control", placeholder = "Liczba uczestników...", @type = "number", @min = "1", @max = "50", @disabled = "disabled" })
                <span class="input-group-addon icon-span"><i class="fas fa-user"></i></span>
            </div>
            @Html.ValidationMessageFor(m => m.MaxCapacity, "", new { @class = "error" })
            <div class="input-group mt-2 mb-2" style="width: 250px;">
                @Html.TextAreaFor(m => m.Description, new { @class = "form-control", placeholder = "Opis...", @disabled = "disabled" })
            </div>
            <button id="joinToSportEvent" class="btn btn-success mt-2 mr-2 mb-2" style="float: left; width: 120px;" @(user.ID == Model.CreatorID ? "disabled" : "") value="@TempData["IsUserParticipating"]"></button>
            @Html.ActionLink("Powrót", "Index", "SportEvent", new { @class = "btn btn-warning mt-2 ml-2 mb-2", style = "float: left; width: 120px;" })
            <div id="response" style="width: 250px; height: 50px; display: none; float: left; text-align: center;"><p style="color: white; line-height: 50px;"></p></div>
        }
    </div>
</div>

<script>
    var marker;
    var map;

    function initMap() {
        var poland = { lat: 52.016, lng: 19.370 };
        map = new google.maps.Map(
            document.getElementById('map'),
            { zoom: 5, center: poland });
        if (@Model.CreatorID == 0) {
            map.addListener('click', function (e) {
                placeMarker(e.latLng, map);
                setCoordinatesAndFullAddressForHiddenFields(e.latLng.lat(), e.latLng.lng());
            });
        }
    }


    function placeMarker(position, map) {
        if (marker) {
            marker.setPosition(position);
        } else {
            marker = new google.maps.Marker({
                position: position,
                map: map
            });
        }
        map.panTo(position);
    }

    function getLocation() {
        var lat = parseFloat(@Model.CoordinateLatitude);
        var lng = parseFloat(@Model.CoordinateLongitude);
        if (!isNaN(lat) && !isNaN(lng)) {
            var latLng = { lat, lng };
            placeMarker(latLng, map);
            map.setZoom(15);
        }
        else if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var lat = position.coords.latitude;
                var lng = position.coords.longitude;
                var latLng = { lat, lng };
                placeMarker(latLng, map);
                setCoordinatesAndFullAddressForHiddenFields(lat, lng);
                map.setZoom(15);
            });
        } else {
        }
    }

    function setCoordinatesAndFullAddressForHiddenFields(lat, lng) {
        $.ajax({
                method: "GET",
                url: "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lng + "&key=AIzaSyDnIft05bOeuRo4GtcH8Xcg1_xgywxkkKw"
            })
            .done(function (data) {
                $('form').find('#Address').val(data.results[0].address_components[1].short_name + " " + data.results[0].address_components[0].short_name + ", " + data.results[0].address_components[3].short_name);
                $('form').find('#CoordinateLatitude').val(lat);
                $('form').find('#CoordinateLongitude').val(lng);
            });
    }

    function setButtonText() {
        var buttonValue = $('#joinToSportEvent').attr('value');
        if (buttonValue == 'False') {
            $('#joinToSportEvent').text("Zapisz się");
        } else {
            $('#joinToSportEvent').text("Wypisz się");
        }
    }

    function setButtonValue() {
        var buttonValue = $('#joinToSportEvent').attr('value');
        if (buttonValue == 'False') {
            $('#joinToSportEvent').val("True");
        } else {
            $('#joinToSportEvent').val("False");
        }
    }

    function setCommunicat() {
        var buttonValue = $('#joinToSportEvent').attr('value');
        if (buttonValue == 'True') {
            $('#response > p').text("Weźmiesz udział");
            $('#response').css('background', 'green');
            $('#response').css('display', 'block');
        }
    }

    $('#joinToSportEvent').click(function () {
        var buttonValue = $('#joinToSportEvent').attr('value');
        console.log(buttonValue);
        console.log(buttonValue == "False");
        $.ajax({
            method: "POST",
            url: '@Url.Action("JoinSportEvent", "SportEvent")',
            data: { userId: @user.ID, sportEventId: @Model.ID, join: buttonValue == "False" ? true : false },
            success: function(data) {
                console.log('success:' + data.Result);
                if (data.Status == "Added" || data.Status == "Removed") {
                    setButtonValue();
                    setButtonText();
                }
                $('#response > p').text(data.Result);
                $('#response').css('background', (data.Status == "Added" ? 'green' : (data.Status == "Removed" ? 'orange' : 'red')));
                $('#response').css('display', 'block');
            }
        });
    });

    $(document).ready(function () {
        setButtonText();
        setCommunicat();

        $('.clockpicker').clockpicker({
            donetext: 'Zatwierdź',
            'default': 'now'
        });

        $('.input-group.date').datepicker({
            language: "pl",
            format: "yyyy-mm-dd",
            orientation: "bottom auto",
            clearBtn: true,
            autoclose: true,
            todayHighlight: true
        });
        
        getLocation();
    });

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAh1VFr5HUsI0JLhxpjF4OaMXWvLU5P9zM&callback=initMap" type="text/javascript"></script>
<script src="https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&sensor=true" type="text/javascript"></script>
@Scripts.Render("~/bundles/jqueryval")